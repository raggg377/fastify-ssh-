{"version":3,"sources":["../../../src/js/args/help.js"],"names":["config","name","charAt","toUpperCase","substr","options","examples","details","length","value","push","printMainColor","printSubColor","generateExamples","generateDetails","join","usageFilter","console","log"],"mappings":"+QAAe,UAAY,CACzB,GAAM,GAAO,KAAKA,MAAL,CAAYC,IAAzB,CACM,EAAW,kBAAQ,GAAKC,MAAL,CAAY,CAAZ,EAAeC,WAAf,GAA+B,EAAKC,MAAL,CAAY,CAAZ,CAAvC,CADjB,CAGM,IAHN,CAKM,EAAS,CACbC,UADa,CAEbC,WAFa,CALf,CAUA,IAAK,GAAM,EAAX,MACmC,CAA7B,MAAKC,OAAL,IAAoBC,MAD1B,GAKE,OALF,EAQA,GAAM,GAAe,EAAOH,OAAP,CAAiB,YAAjB,CAAgC,EAArD,CACM,EAAqC,QAA7B,QAAO,MAAKL,MAAL,CAAYS,KAAnB,KACN,KAAKT,MAAL,CAAYS,KADN,CAEV,EAHJ,CAWA,IAAK,GAAM,EAAX,GANA,GAAMC,IAAN,CAAW,CACT,EADS,WAEC,KAAKC,cAAL,GAFD,KAE8B,KAAKC,aAAL,CAAmB,GAAnB,CAF9B,CAGT,EAHS,CAAX,CAMA,GACO,IADP,GAKE,EAAMF,IAAN,CAAW,CAAC,EAAD,CAAQ,IAAR,KAA4B,EAA5B,CAAgC,EAAhC,CAAX,CALF,CAOgB,UAAV,GAPN,CAQI,EAAMA,IAAN,CAAW,KAAKG,gBAAL,EAAX,CARJ,CAUI,EAAMH,IAAN,CAAW,KAAKI,eAAL,GAAX,CAVJ,CAaE,EAAMJ,IAAN,SAbF,EAgBA,GAAI,GAAS,EAAb,oBA9CyB,IAiDzB,yEACE,GAAU,EAAKK,IAAL,CAAU,MAAV,CAlDa,8EAqDpB,EAAOV,OArDa,GAsDvB,EAAS,sBAtDc,EAyDzB,GAAM,GAAc,KAAKL,MAAL,CAAYgB,WAAhC,CAG2B,UAAvB,UA5DqB,GA6DvB,EAAS,OA7Dc,EAgEzBC,QAAQC,GAAR,GACD,C","file":"help.js","sourcesContent":["export default function () {\n  const name = this.config.name;\n  const firstBig = word => word.charAt(0).toUpperCase() + word.substr(1);\n\n  const parts = [];\n\n  const groups = {\n    options: true,\n    examples: true,\n  };\n\n  for (const group in groups) {\n    if (this.details[group].length > 0) {\n      continue; // eslint-disable-line\n    }\n\n    groups[group] = false;\n  }\n\n  const optionHandle = groups.options ? '[options] ' : '';\n  const value = typeof this.config.value === 'string'\n    ? ` ${this.config.value}`\n    : '';\n\n  parts.push([\n    '',\n    `Usage: ${this.printMainColor(name)} ${this.printSubColor(optionHandle + value)}`,\n    '',\n  ]);\n\n  for (const group in groups) {\n    if (!groups[group]) {\n      continue; // eslint-disable-line\n    }\n\n    parts.push(['', `${firstBig(group)}:`, '', '']);\n\n    if (group === 'examples') {\n      parts.push(this.generateExamples());\n    } else {\n      parts.push(this.generateDetails(group));\n    }\n\n    parts.push(['', '']);\n  }\n\n  let output = '';\n\n  // And finally, merge and output them\n  for (const part of parts) {\n    output += part.join('\\n  ');\n  }\n\n  if (!groups.options) {\n    output = 'No options available';\n  }\n\n  const usageFilter = this.config.usageFilter;\n\n  // If filter is available, pass usage information through\n  if (typeof usageFilter === 'function') {\n    output = usageFilter(output) || output;\n  }\n\n  console.log(output); // eslint-disable-line\n}\n"]}