{"version":3,"sources":["../../../src/js/args/option.js"],"names":["find","usage","charAt","toUpperCase","constructor","String","details","options","Array","concat","Error","length","defaultValue","description","filter","init","handleType","push"],"mappings":"iRAAe,iBAAiD,CAC9D,GAAI,KAAJ,CAEM,EAAc,eAAuB,CAIzC,MAHI,GAAQA,IAAR,CAAa,kBAAY,GAASC,KAAT,CAAe,CAAf,KAAZ,CAAb,CAGJ,GAFE,EAAQ,EAAEC,MAAF,CAAS,CAAT,EAAYC,WAAZ,EAEV,EAAO,KACR,CAPD,CAWA,OAAQ,EAAKC,WAAb,EACE,IAAKC,OAAL,CACE,EAAQ,IAAkB,KAAKC,OAAL,CAAaC,OAA/B,CAAwC,EAAKL,MAAL,CAAY,CAAZ,CAAxC,CADV,CAEE,MACF,IAAKM,MAAL,CACE,EAAQ,EAAMC,MAAN,GADV,CAEE,MACF,QACE,KAAM,IAAIC,MAAJ,CAAU,yBAAV,CAAN,CARJ,CAYA,GAAmB,CAAf,GAAMC,MAAN,EAAsC,CAAlB,GAAM,CAAN,EAASA,MAAjC,CACE,KAAM,IAAID,MAAJ,CAAU,+CAAV,CAAN,CAGF,GAAM,GAAgB,CACpBE,cADoB,CAEpBX,OAFoB,CAGpBY,aAHoB,CAAtB,CAMA,GAA+E,CAA3E,QAAKP,OAAL,CAAaC,OAAb,CAAqBO,MAArB,CAA4B,kBAAQ,GAAKb,KAAL,CAAW,CAAX,IAAkB,EAAM,CAAN,CAA1B,CAA5B,EAAgEU,MAApE,CAAkF,CAChF,GAAI,EAAJ,CAiBA,aAXO,IAWP,iBAAI,EAAJ,CAAqB,CAEnB,EAAcI,IAAd,CADqC,UAAhB,UACA,GAAsB,KAAKC,UAAL,IAA8B,CAA9B,CAC5C,CAGD,KAAKV,OAAL,CAAaC,OAAb,CAAqBU,IAArB,GACD,CAGD,MAAO,KACR,C","file":"option.js","sourcesContent":["export default function (name, description, defaultValue, init) {\n  let usage = [];\n\n  const assignShort = (n, options, short) => {\n    if (options.find(flagName => flagName.usage[0] === short)) {\n      short = n.charAt(0).toUpperCase(); // eslint-disable-line no-param-reassign\n    }\n    return [short, n];\n  };\n\n  // If name is an array, pick the values\n  // Otherwise just use the whole thing\n  switch (name.constructor) {\n    case String:\n      usage = assignShort(name, this.details.options, name.charAt(0));\n      break;\n    case Array:\n      usage = usage.concat(name);\n      break;\n    default:\n      throw new Error('Invalid name for option');\n  }\n\n  // Throw error if short option is too long\n  if (usage.length > 0 && usage[0].length > 1) {\n    throw new Error('Short version of option is longer than 1 char');\n  }\n\n  const optionDetails = {\n    defaultValue,\n    usage,\n    description,\n  };\n\n  if (this.details.options.filter(item => item.usage[1] === usage[1]).length === 0) {\n    let defaultIsWrong;\n\n    switch (defaultValue) {\n      case false:\n        defaultIsWrong = true;\n        break;\n      case null:\n        defaultIsWrong = true;\n        break;\n      case undefined:\n        defaultIsWrong = true;\n        break;\n      default:\n        defaultIsWrong = false;\n    }\n\n    // Set initializer depending on type of default value\n    if (!defaultIsWrong) {\n      const initFunction = typeof init === 'function';\n      optionDetails.init = initFunction ? init : this.handleType(defaultValue)[1];\n    }\n\n    // Register option to global scope\n    this.details.options.push(optionDetails);\n  }\n\n  // Allow chaining of .option()\n  return this;\n}\n"]}