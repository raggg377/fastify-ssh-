{"version":3,"sources":["../../../src/js/args/utils.js"],"names":["handleType","constructor","String","Array","Number","parseInt","readOption","defaultValue","usage","raw","isArray","_","push","init","toString","length","getOptions","details","options","Object","assign","hasOwnProperty","call","isDefined","forEach","findBestMatch","console","log","bestMatch","rating","filter","target","generateDetails","trim","showHelp","generateExamples","examples","printSubColor","printMainColor","description","sort","join","indexOf","slice","repeat","JSON","stringify","runCommand","config","help","concat","sub","shift","bind"],"mappings":"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","file":"utils.js","sourcesContent":["import camelcase from 'lodash.camelcase';\nimport stringSimilarity from 'string-similarity';\n\nexport default {\n  handleType(value) {\n    let type = value;\n    if (typeof value !== 'function') {\n      type = value.constructor;\n    }\n\n    // Depending on the type of the default value,\n    // select a default initializer function\n    switch (type) {\n      case String:\n        return ['[value]'];\n      case Array:\n        return ['<list>'];\n      case Number:\n      case parseInt:\n        return ['<n>', parseInt];\n      default:\n        return [''];\n    }\n  },\n\n  readOption(option) {\n    let value = option.defaultValue;\n    const contents = {};\n\n    // If option has been used, get its value\n    for (const name of option.usage) {\n      const fromArgs = this.raw[name];\n      if (typeof fromArgs !== 'undefined') {\n        value = fromArgs;\n      }\n    }\n\n    let count = -1;\n    // Process the option's value\n    for (let name of option.usage) {\n      count += 1;\n      let propVal = value;\n\n      // Convert the value to an array when the option is called just once\n      if (\n        Array.isArray(option.defaultValue) &&\n        typeof propVal !== typeof option.defaultValue\n      ) {\n        if (count === 0) {\n          this.raw._.push(propVal);\n        }\n        propVal = [propVal];\n      }\n\n      if (\n        typeof option.defaultValue !== 'undefined' &&\n        typeof propVal !== typeof option.defaultValue\n      ) {\n        if (count === 0) {\n          this.raw._.push(propVal);\n        }\n        propVal = option.defaultValue;\n      }\n\n      let condition = true;\n\n      if (option.init) {\n        // Only use the toString initializer if value is a number\n        if (option.init === toString) {\n          condition = propVal.constructor === Number;\n        }\n\n        if (condition) {\n          // Pass it through the initializer\n          propVal = option.init(propVal);\n        }\n      }\n\n      // Camelcase option name (skip short flag)\n      if (name.length > 1) {\n        name = camelcase(name);\n      }\n\n      // Add option to list\n      contents[name] = propVal;\n    }\n\n    return contents;\n  },\n\n  getOptions(definedSubcommand) {\n    const options = {};\n    const args = {};\n\n    // Set option defaults\n    for (const option of this.details.options) {\n      if (typeof option.defaultValue === 'undefined') {\n        continue; // eslint-disable-line\n      }\n\n      Object.assign(options, this.readOption(option));\n    }\n\n    // Copy over the arguments\n    Object.assign(args, this.raw);\n    const _ = [...args._];\n    delete args._;\n\n    // Override defaults if used in command line\n    for (const option in args) {\n      if (!{}.hasOwnProperty.call(args, option)) {\n        continue; // eslint-disable-line\n      }\n      const related = this.isDefined(option, 'options');\n\n      if (related) {\n        const details = this.readOption(related);\n        Object.assign(options, details);\n      }\n\n      if (!related && !definedSubcommand) {\n        // Unknown Option\n        const availableOptions = [];\n        this.details.options.forEach((opt) => {\n          availableOptions.push(...opt.usage);\n        });\n\n        const suggestOption = stringSimilarity.findBestMatch(\n          option,\n          availableOptions,\n        );\n\n        console.log(`The option \"${option}\" is unknown.`); // eslint-disable-line\n\n        if (suggestOption.bestMatch.rating >= 0.5) {\n          console.log(' Did you mean the following one?\\n'); // eslint-disable-line\n\n          const suggestion = this.details.options.filter((item) => {\n            for (const flag of item.usage) {\n              if (flag === suggestOption.bestMatch.target) {\n                return true;\n              }\n            }\n\n            return false;\n          });\n\n          console.log(`${this.generateDetails(suggestion)[0].trim()}\\n`); // eslint-disable-line\n        } else {\n          console.log(' Here\\'s a list of all available options: \\n'); // eslint-disable-line\n          this.showHelp();\n        }\n      }\n    }\n\n    options._ = _;\n    return options;\n  },\n\n  generateExamples() {\n    const examples = this.details.examples;\n    const parts = [];\n\n    for (const item in examples) {\n      if (!{}.hasOwnProperty.call(examples, item)) {\n        continue; // eslint-disable-line\n      }\n      const usage = this.printSubColor(`$ ${examples[item].usage}`);\n      const description = this.printMainColor(\n        `- ${examples[item].description}`,\n      );\n      parts.push(`  ${description}\\n\\n    ${usage}\\n\\n`);\n    }\n\n    return parts;\n  },\n\n  generateDetails(kind) {\n    // Get all properties of kind from global scope\n    const items = typeof kind === 'string' ? [...this.details[kind]] : [...kind];\n    const parts = [];\n    const isCmd = kind === 'commands';\n\n    // Sort items alphabetically\n    items.sort((a, b) => {\n      const first = isCmd ? a.usage : a.usage[1];\n      const second = isCmd ? b.usage : b.usage[1];\n\n      switch (true) {\n        case first < second:\n          return -1;\n        case first > second:\n          return 1;\n        default:\n          return 0;\n      }\n    });\n\n    for (const item in items) {\n      if (!{}.hasOwnProperty.call(items, item)) {\n        continue; // eslint-disable-line\n      }\n\n      let usage = items[item].usage;\n      let initial = items[item].defaultValue;\n\n      // If usage is an array, show its contents\n      if (usage.constructor === Array) {\n        if (isCmd) {\n          usage = usage.join(', ');\n        } else {\n          const isVersion = usage.indexOf('v');\n          usage = `-${usage[0]}, --${usage[1]}`;\n\n          if (!initial) {\n            initial = items[item].init;\n          }\n\n          usage += initial && isVersion === -1\n            ? ` ${this.handleType(initial)[0]}`\n            : '';\n        }\n      }\n\n      // Overwrite usage with readable syntax\n      items[item].usage = usage;\n    }\n\n    // Find length of longest option or command\n    // Before doing that, make a copy of the original array\n    const longest = items.slice().sort((a, b) => b.usage.length - a.usage.length)[0].usage.length;\n\n    for (const item of items) {\n      let usage = item.usage;\n      let description = item.description;\n      const defaultValue = item.defaultValue;\n      const difference = longest - usage.length;\n\n      // Compensate the difference to longest property with spaces\n      usage += ' '.repeat(difference);\n\n      // Add some space around it as well\n      if (typeof defaultValue !== 'undefined') {\n        if (typeof defaultValue === 'boolean') {\n          description += ` (${defaultValue ? 'enabled' : 'disabled'} by default)`;\n        } else {\n          description += ` (defaults to ${JSON.stringify(defaultValue)})`;\n        }\n      }\n      parts.push(\n        `  ${this.printMainColor(usage)}  ${this.printSubColor(description)}`);\n    }\n\n    return parts;\n  },\n\n  runCommand(details, options) {\n    // If help is disabled, remove initializer\n    if (details.usage === 'help' && !this.config.help) {\n      details.init = false; // eslint-disable-line\n    }\n\n    // If command has initializer, call it\n    if (details.init) {\n      const sub = [].concat(this.sub);\n      sub.shift();\n\n      return details.init.bind(this)(details.usage, sub, options);\n    }\n\n    return '';\n  },\n\n  isDefined(name, list) {\n    // Get all items of kind\n    const children = this.details[list];\n\n    // Check if a child matches the requested name\n    for (const child of children) {\n      const usage = child.usage;\n      const type = usage.constructor;\n\n      if (type === Array && usage.indexOf(name) > -1) {\n        return child;\n      }\n\n      if (type === String && usage === name) {\n        return child;\n      }\n    }\n\n    // If nothing matches, item is not defined\n    return false;\n  },\n};\n"]}