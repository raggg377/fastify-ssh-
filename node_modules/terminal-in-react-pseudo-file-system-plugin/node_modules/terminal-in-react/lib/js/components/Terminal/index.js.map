{"version":3,"sources":["../../../../src/js/components/Terminal/index.js"],"names":["componentWillMount","loadPlugins","assembleCommands","setDescriptions","setShortcuts","createTab","setState","prompt","props","promptSymbol","componentDidMount","watchConsoleLogging","allowTabs","state","tabs","push","handleChange","handlerKeyPress","registerInstance","activeTab","removeTab","splice","getAppContent","show","minimise","getBar","getContent","getNote","style","showActions","hideTopBar","actionHandlers","setActiveTab","toggleState","getPluginData","pluginData","setPluginData","defaultDesciptions","descriptions","plugins","defaultShortcuts","shortcuts","setPromptPrefix","promptPrefix","setFalse","setTrue","setValueWithHistory","history","historyCounter","value","instances","find","index","printLine","bind","removeLine","runCommand","setCanScroll","setScrollPosition","focusInput","getPluginMethod","getData","displayName","setData","os","pluginInstances","updateApi","getPublicMethods","_getName","_getVersion","version","console","error","instance","pluginMethods","indexOf","filter","defaultCommands","commands","autocompleteValue","Object","keys","findBestMatch","bestMatch","rating","target","clearScreen","summary","checkShortcuts","values","forEach","length","keyInputs","map","replace","split","slice","preventDefault","stopPropagation","editLine","line","_","join","input","key","shiftKey","dontShowCommand","defaultData","log","Error","canScroll","pos","readStdOut","commandPassThrough","parse","help","method","needsInstance","printToActive","showHelp","showMsg","msg","clear","echo","options","name","description","init","parseInt","defaultValue","darwin","startState","maximise","symbol","barShowing","tabsShowing","openWindow","closeWindow","minimiseWindow","unminimiseWindow","maximiseWindow","unmaximiseWindow","toggleShow","toggleMaximise","toggleMinimize","color","barColor","backgroundColor","propTypes","defaultProps","childContextTypes"],"mappings":"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","file":"index.js","sourcesContent":["/* eslint-disable no-console, react/sort-comp */\nimport React, {Component} from 'react'; // eslint-disable-line\nimport stringSimilarity from 'string-similarity';\nimport whatkey from 'whatkey';\nimport isEqual from 'lodash.isequal';\nimport { ThemeProvider } from 'styled-components';\nimport { handleLogging } from '../../utils';\nimport {\n  TerminalPropTypes,\n  TerminalContextTypes,\n  TerminalDefaultProps,\n} from '../types';\n\nimport { os, pluginMap, uuidv4, getShortcuts, modCommands } from './terminal-utils';\n\nimport { Base, ContainerWrapper, Note } from './styled-elements';\n\nimport Bar from '../Bar';\nimport Content from '../Content/index';\nimport Tabs from '../Tabs/index';\n\nclass Terminal extends Component {\n  static displayName = 'Terminal';\n\n  static propTypes = TerminalPropTypes;\n\n  static defaultProps = TerminalDefaultProps;\n\n  static childContextTypes = TerminalContextTypes;\n\n  constructor(props) {\n    super(props);\n\n    this.pluginData = {};\n\n    this.defaultCommands = {\n      // eslint-disable-line react/sort-comp\n      show: this.showMsg,\n      clear: {\n        method: this.clearScreen,\n        needsInstance: true,\n      },\n      help: {\n        method: this.showHelp,\n        needsInstance: true,\n      },\n      echo: input => input.slice(1).join(' '),\n      'edit-line': {\n        method: this.editLine,\n        needsInstance: true,\n        options: [\n          {\n            name: 'line',\n            description: 'the line you want to edit. -1 is the last line',\n            init: value => parseInt(value, 10),\n            defaultValue: -1,\n          },\n        ],\n      },\n    };\n\n    this.defaultDesciptions = {\n      show: (props.msg && props.msg.length > 0) ? 'show the msg' : false,\n      clear: 'clear the screen',\n      help: 'list all the commands',\n      echo: false,\n      'edit-line': false,\n    };\n\n    this.defaultShortcuts = {\n      'win, linux, darwin': {\n        'alt + t': this.createTab,\n      },\n      'win, linux': {\n        'ctrl + l': 'clear',\n      },\n      darwin: {\n        'cmd + k': 'clear',\n      },\n    };\n\n    this.state = {\n      prompt: '>',\n      commands: {},\n      descriptions: {},\n      show: props.startState !== 'closed',\n      minimise: props.startState === 'minimised',\n      maximise: props.startState === 'maximised',\n      shortcuts: {},\n      activeTab: '',\n      tabs: [],\n      instances: [],\n    };\n  }\n\n  getChildContext() {\n    return {\n      instances: this.state.instances,\n      symbol: this.state.prompt,\n      show: this.state.show,\n      minimise: this.state.minimise,\n      maximise: this.state.maximise,\n      activeTab: this.state.activeTab,\n      barShowing: !this.props.hideTopBar,\n      tabsShowing: this.props.allowTabs,\n      openWindow: this.setTrue('show'),\n      closeWindow: this.setFalse('show'),\n      minimiseWindow: this.setTrue('minimise'),\n      unminimiseWindow: this.setFalse('minimise'),\n      maximiseWindow: this.setTrue('maximise'),\n      unmaximiseWindow: this.setFalse('maximise'),\n      toggleShow: this.toggleState('show'),\n      toggleMaximise: this.toggleState('maximise'),\n      toggleMinimize: this.toggleState('minimise'),\n    };\n  }\n\n  // Prepare the symbol\n  componentWillMount = () => {\n    this.loadPlugins();\n    this.assembleCommands();\n    this.setDescriptions();\n    this.setShortcuts();\n\n    this.createTab(true);\n    this.setState({ prompt: this.props.promptSymbol });\n  };\n\n  // Load everything!\n  componentDidMount = () => {\n    if (this.props.watchConsoleLogging) {\n      this.watchConsoleLogging();\n    }\n  };\n\n  // Tab creation\n  createTab = (force = false) => {\n    const { allowTabs } = this.props;\n    if (force || allowTabs) {\n      const { tabs } = this.state;\n      const id = uuidv4();\n\n      tabs.push((\n        <Content\n          key={id}\n          id={id}\n          handleChange={this.handleChange}\n          handlerKeyPress={this.handlerKeyPress}\n          register={(...args) => this.registerInstance(id, ...args)}\n        />\n      ));\n\n      this.setState({ activeTab: id, tabs });\n    }\n  };\n\n  // Tab removal\n  removeTab = (index) => {\n    const { tabs } = this.state;\n    tabs.splice(index, 1);\n    this.setState({ tabs });\n  }\n\n  // Show the content on toggling\n  getAppContent = () => {\n    const { show, minimise } = this.state;\n    if (!show) {\n      return this.getNote();\n    }\n    if (minimise) {\n      return this.getBar();\n    }\n    return this.getContent();\n  };\n\n  // Shows the full window (normal window)\n  getContent = () => {\n    const {\n      style,\n      showActions,\n      hideTopBar,\n      allowTabs,\n      actionHandlers,\n    } = this.props;\n    const { activeTab, tabs } = this.state;\n\n    return (\n      <ContainerWrapper style={{ ...style }}>\n        {!hideTopBar && (\n          <Bar showActions={showActions} {...actionHandlers} />\n        )}\n        {allowTabs && (\n          <Tabs\n            active={activeTab}\n            setActiveTab={this.setActiveTab}\n            createTab={this.createTab}\n            removeTab={this.removeTab}\n          />\n        )}\n        {tabs}\n      </ContainerWrapper>\n    );\n  };\n\n  // Show only bar (minimise)\n  getBar = () => {\n    const { style, showActions, actionHandlers } = this.props;\n\n    return (\n      <ContainerWrapper style={{ ...style }}>\n        <Bar\n          showActions={showActions}\n          {...actionHandlers}\n        />\n      </ContainerWrapper>\n    );\n  };\n\n  // Show msg (on window close)\n  getNote = () => (\n    <Note>\n      <h1>OOPS! You closed the window.</h1>\n      <img\n        src=\"https://camo.githubusercontent.com/95ad3fffa11193f85dedbf14ca67e4c5c07182d0/687474703a2f2f69636f6e732e69636f6e617263686976652e636f6d2f69636f6e732f70616f6d656469612f736d616c6c2d6e2d666c61742f313032342f7465726d696e616c2d69636f6e2e706e67\"\n        width=\"200\"\n        height=\"200\"\n        alt=\"note\"\n        onClick={this.toggleState('show')}\n      />\n      Click on the icon to reopen.\n    </Note>\n  );\n\n  // Plugin data getter\n  getPluginData = name => this.pluginData[name];\n\n  // Plugin data setter\n  setPluginData = (name, data) => (this.pluginData[name] = data);\n\n  // Set descriptions of the commands\n  setDescriptions = () => {\n    let descriptions = {\n      ...this.defaultDesciptions,\n      ...this.props.descriptions,\n    };\n    pluginMap(this.props.plugins, (plugin) => {\n      if (plugin.descriptions) {\n        descriptions = {\n          ...descriptions,\n          ...plugin.descriptions,\n        };\n      }\n    });\n    this.setState({ descriptions });\n  };\n\n  // Set command shortcuts\n  setShortcuts = () => {\n    let shortcuts = getShortcuts({}, this.defaultShortcuts);\n    shortcuts = getShortcuts(shortcuts, this.props.shortcuts);\n    pluginMap(this.props.plugins, (plugin) => {\n      if (plugin.shortcuts) {\n        shortcuts = getShortcuts(shortcuts, plugin.shortcuts);\n      }\n    });\n    this.setState({ shortcuts });\n  };\n\n  // Setter to change the prefix of the input prompt\n  setPromptPrefix = (instance, promptPrefix) => {\n    instance.setState({ promptPrefix });\n  };\n\n  // Set the currently active tab\n  setActiveTab = (activeTab) => {\n    this.setState({ activeTab });\n  };\n\n  // Hide window\n  setFalse = name => () => this.setState({ [name]: false });\n\n  // Show window\n  setTrue = name => () => this.setState({ [name]: true });\n\n  /**\n   * set the input value with the possible history value\n   * @param {number} next position on the history\n   */\n  setValueWithHistory = (instance, position, inputRef) => {\n    const { history } = instance.state;\n    if (history[position]) {\n      instance.setState({ historyCounter: position });\n      inputRef.value = history[position];\n    }\n  };\n\n  // Used to keep track of all instances\n  registerInstance = (index, instance) => {\n    const { instances } = this.state;\n    const pluginInstances = {};\n    const pluginMethods = {};\n\n    const old = instances.find(i => i.index === index);\n\n    pluginMap(this.props.plugins, (PluginClass, config) => {\n      try {\n        const api = {\n          printLine: this.printLine.bind(this, instance),\n          removeLine: this.removeLine.bind(this, instance),\n          runCommand: this.runCommand.bind(this, instance),\n          setCanScroll: this.setCanScroll.bind(this, instance),\n          setScrollPosition: this.setScrollPosition.bind(this, instance),\n          focusInput: this.focusInput.bind(this, instance),\n          setPromptPrefix: this.setPromptPrefix.bind(this, instance),\n          getPluginMethod: this.getPluginMethod.bind(this, instance),\n          getData: () => this.getPluginData(PluginClass.displayName),\n          setData: data => this.setPluginData(PluginClass.displayName, data),\n          os,\n        };\n\n        let plugin;\n        if (old) {\n          old.pluginInstances[PluginClass.displayName].updateApi(api);\n        } else {\n          plugin = new PluginClass(api, config);\n          pluginMethods[PluginClass.displayName] = {\n            ...plugin.getPublicMethods(),\n            _getName: () => PluginClass.displayName,\n            _getVersion: () => PluginClass.version,\n          };\n        }\n\n        pluginInstances[PluginClass.displayName] = plugin;\n      } catch (e) {\n        console.error(`Error instantiating plugin ${PluginClass.displayName}`, e); // eslint-disable-line no-console\n      }\n    });\n\n    const data = {\n      index,\n      instance,\n      pluginMethods: old ? old.pluginMethods : pluginMethods,\n      pluginInstances: old ? old.pluginInstances : pluginInstances,\n    };\n\n    if (old) {\n      const realIndex = instances.indexOf(old);\n      instances[realIndex] = data;\n    } else {\n      instances.push(data);\n    }\n\n    this.setState({ instances });\n\n    return () => {\n      const insts = this.state.instances;\n      this.setState({\n        instances: insts.filter(i => !isEqual(i.instance, instance)),\n      });\n    };\n  }\n\n  // Toggle a state boolean\n  toggleState = name => () => this.setState({ [name]: !this.state[name] });\n\n  // Prepare the built-in commands\n  assembleCommands = () => {\n    let commands = {\n      ...this.defaultCommands,\n      ...this.props.commands,\n    };\n\n    pluginMap(this.props.plugins, (plugin) => {\n      if (plugin.commands) {\n        commands = {\n          ...commands,\n          ...plugin.commands,\n        };\n      }\n    });\n\n    this.setState({ commands: modCommands(commands) });\n  };\n\n  /**\n   * autocomplete with the command the have the best match\n   * @param {object} input reference\n   */\n  autocompleteValue = (inputRef) => {\n    const { descriptions } = this.state;\n    const keysToCheck = Object.keys(descriptions).filter(\n      key => descriptions[key] !== false,\n    );\n    const { bestMatch } = stringSimilarity.findBestMatch(\n      inputRef.value,\n      keysToCheck,\n    );\n\n    if (bestMatch.rating >= 0.5) {\n      return bestMatch.target;\n    }\n\n    return inputRef.value;\n  };\n\n  // Refresh or clear the screen\n  clearScreen = (args, printLine, runCommand, instance) => {\n    instance.setState({ summary: [] });\n  };\n\n  // Method to check for shortcut and invoking commands\n  checkShortcuts = (instance, key, e) => {\n    const instanceData = this.state.instances.find(i => isEqual(i.instance, instance));\n    let cuts = this.state.shortcuts;\n    if (instanceData) {\n      Object.values(instanceData.pluginInstances).forEach((i) => {\n        cuts = getShortcuts(cuts, i.shortcuts);\n      });\n    }\n\n    const shortcuts = Object.keys(cuts);\n    if (shortcuts.length > 0) {\n      const { keyInputs } = instance.state;\n      let modKey = key;\n      if (key === 'meta') {\n        // eslint-disable-next-line no-nested-ternary\n        modKey = os === 'darwin' ? 'cmd' : os === 'win' ? 'win' : 'meta';\n      }\n      keyInputs.push(modKey);\n      const len = keyInputs.length;\n\n      const options = shortcuts\n        .map((cut, i) => [cut.replace(/\\s/g, '').split('+'), i])\n        .filter(cut => cut[0].length >= keyInputs.length)\n        .filter(cut => isEqual(cut[0].slice(0, len), keyInputs));\n\n      if (options.length > 0) {\n        if (options.length === 1 && options[0][0].length === len) {\n          const shortcut = shortcuts[options[0][1]];\n          const action = cuts[shortcut];\n          if (typeof action === 'string') {\n            this.runCommand(instance, cuts[shortcut]);\n          } else if (typeof action === 'function') {\n            e.preventDefault();\n            e.stopPropagation();\n            action();\n          }\n          instance.setState({ keyInputs: [] });\n        }\n      } else if (keyInputs.length > 0) {\n        instance.setState({ keyInputs: [] });\n      }\n    }\n  };\n\n  // edit-line command\n  editLine = (args, printLine, runCommand, instance) => {\n    const { summary } = instance.state;\n    let index = args.line;\n    if (index < 0) {\n      index = summary.length === 0 ? 0 : summary.length - index;\n    }\n    summary[index] = args._.join(' ');\n    instance.setState({ summary });\n  };\n\n  // Listen for user input\n  handleChange = (instance, e) => {\n    const { input, promptPrefix, history } = instance.state;\n    if (e.key === 'Enter' && !e.shiftKey) {\n      if (typeof e.dontShowCommand === 'undefined') {\n        this.printLine.bind(this, instance)(\n          `${promptPrefix}${this.state.prompt} ${e.target.value}`,\n          false,\n        );\n      }\n\n      input.push(e.target.value);\n      const res = this.runCommand(instance, `${input.join('\\n')}`);\n\n      if (typeof res !== 'undefined') {\n        this.printLine.bind(this, instance)(res);\n      }\n\n      const newHistory = [...history, e.target.value];\n      instance.setState({\n        input: [],\n        history: newHistory,\n        historyCounter: newHistory.length,\n      });\n      e.target.value = ''; // eslint-disable-line no-param-reassign\n    } else if (e.key === 'Enter' && e.shiftKey) {\n      this.printLine.bind(this, instance)(\n        `${promptPrefix}${this.state.prompt} ${e.target.value}`,\n        false,\n      );\n      const newHistory = [...history, e.target.value];\n      instance.setState({\n        input: [...input, e.target.value],\n        history: newHistory,\n        historyCounter: newHistory.length,\n      });\n      e.target.value = ''; // eslint-disable-line no-param-reassign\n    }\n  };\n\n  /**\n   * Base of key code set the value of the input\n   * with the history\n   * @param {event} event of input\n   */\n  handlerKeyPress = (instance, e, inputRef) => {\n    const key = whatkey(e).key;\n    const { historyCounter, keyInputs } = instance.state;\n    if (keyInputs.length === 0) {\n      switch (key) {\n        case 'up':\n          this.setValueWithHistory(instance, historyCounter - 1, inputRef);\n          break;\n        case 'down':\n          this.setValueWithHistory(instance, historyCounter + 1, inputRef);\n          break;\n        case 'tab':\n          inputRef.value = this.autocompleteValue(inputRef);\n          e.preventDefault();\n          break;\n        default:\n          break;\n      }\n    }\n    this.checkShortcuts(instance, key, e);\n  }\n\n  // Plugins\n  loadPlugins = () => {\n    const pluginData = {};\n    pluginMap(this.props.plugins, (plugin) => {\n      try {\n        pluginData[plugin.displayName] = plugin.defaultData;\n      } catch (e) {\n        console.error(`Error loading plugin ${plugin.displayName}`, e); // eslint-disable-line no-console\n      }\n    });\n    this.pluginData = pluginData;\n  };\n\n  // Plugin api method to get a public plugin method\n  getPluginMethod = (instance, name, method) => {\n    const instanceData = this.state.instances.find(i => isEqual(i.instance, instance));\n    if (instanceData) {\n      if (instanceData.pluginMethods[name]) {\n        if (instanceData.pluginMethods[name][method]) {\n          return instanceData.pluginMethods[name][method];\n        }\n        console.log(instanceData.pluginMethods[name]);\n        throw new Error(\n          `No method with name ${method} has been registered for plugin ${name}`,\n        );\n      } else {\n        throw new Error(`No plugin with name ${name} has been registered`);\n      }\n    }\n    return null;\n  };\n\n  // Set if the current tab can scroll\n  setCanScroll = (instance, force) => {\n    if (typeof force !== 'undefined') {\n      instance.setState({ canScroll: force });\n    }\n  }\n\n  // Set the scroll position of the contents\n  setScrollPosition = (instance, pos) => {\n    if (typeof pos === 'number') {\n      instance.setScrollPosition(pos);\n    }\n  }\n\n  // Set focus to the input\n  focusInput = (instance) => {\n    if (typeof pos === 'number') {\n      instance.focusInput();\n    }\n  }\n\n  // Print the summary (input -> output)\n  printLine = (instance, inp, std = true) => {\n    let print = true;\n    if (std) {\n      const instanceData = this.state.instances.find(i => isEqual(i.instance, instance));\n      if (instanceData) {\n        const plugins = instanceData.pluginInstances;\n        for (let i = 0; i < plugins.length; i += 1) {\n          try {\n            print = plugins[i].readStdOut(inp);\n          } catch (e) {\n            // Do nothing\n          }\n        }\n      }\n    }\n\n    if (print !== false) {\n      const summary = instance.state.summary;\n      summary.push(inp);\n      instance.setState({ summary });\n    }\n  };\n\n  // Remove a line from the summary\n  removeLine = (instance, lineNumber = -1) => {\n    const summary = instance.state.summary;\n    summary.splice(lineNumber, 1);\n    instance.setState({ summary });\n  }\n\n  // Execute the commands\n  runCommand = (instance, inputText) => {\n    const inputArray = inputText.split(' ');\n    const input = inputArray[0];\n    const args = inputArray; // Undefined for function call\n    const instanceData = this.state.instances.find(i => isEqual(i.instance, instance));\n    let commands = { ...this.state.commands };\n    if (instanceData) {\n      Object.values(instanceData.pluginInstances).forEach((i) => {\n        commands = {\n          ...commands,\n          ...modCommands(i.commands),\n        };\n      });\n    }\n    const command = commands[input];\n    let res;\n\n    if (input === '') {\n      // do nothing\n    } else if (command === undefined) {\n      if (typeof this.props.commandPassThrough === 'function') {\n        res = this.props.commandPassThrough(\n          inputArray,\n          this.printLine.bind(this, instance),\n          this.runCommand.bind(this, instance),\n        );\n      } else {\n        this.printLine.bind(this, instance)(`-bash:${input}: command not found`);\n      }\n    } else {\n      const parsedArgs = command.parse(args);\n      const type = typeof parsedArgs;\n      if (type !== 'object' || (type === 'object' && !parsedArgs.help)) {\n        res = command.method(\n          parsedArgs,\n          this.printLine.bind(this, instance),\n          this.runCommand.bind(this, instance),\n          command.needsInstance === true ? instance : undefined,\n        );\n      }\n    }\n    return res;\n  };\n\n  // Print to active instance\n  printToActive = (...args) => {\n    const data = this.state.instances.find(i => i.index === this.state.activeTab);\n    if (data && data.instance !== null) {\n      this.printLine(data.instance, ...args);\n    }\n  }\n\n  // Listen for console logging and pass the input to handler (handleLogging)\n  watchConsoleLogging = () => {\n    handleLogging('log', this.printToActive);\n    handleLogging('info', this.printToActive);\n    // handleLogging('warn', this.printToActive);\n    // handleLogging('error', this.printToActive);\n  };\n\n  // List all the commands (state + user defined)\n  showHelp = (args, printLine, runCommand, instance) => {\n    let commands = { ...this.state.commands };\n    let descriptions = { ...this.state.descriptions };\n    const instanceData = this.state.instances.find(i => isEqual(i.instance, instance));\n    if (instanceData) {\n      Object.values(instanceData.pluginInstances).forEach((i) => {\n        commands = {\n          ...commands,\n          ...i.commands,\n        };\n        descriptions = {\n          ...descriptions,\n          ...i.descriptions,\n        };\n      });\n    }\n    const options = Object.keys(commands);\n\n    for (const option of options) {\n      // eslint-disable-line no-restricted-syntax\n      if (descriptions[option] !== false) {\n        printLine(`${option} - ${descriptions[option]}`);\n      }\n    }\n  };\n\n  // Show the msg (prop msg)\n  showMsg = (args, printLine) => {\n    if (this.props.msg && this.props.msg.length > 0) {\n      printLine(this.props.msg);\n    }\n  };\n\n  render() {\n    const theme = {\n      color: this.props.color,\n      prompt: this.props.prompt,\n      barColor: this.props.barColor,\n      backgroundColor: this.props.backgroundColor,\n    };\n\n    return (\n      <ThemeProvider theme={theme}>\n        <Base\n          className=\"terminal-base\"\n          fullscreen={this.state.maximise}\n        >\n          {this.getAppContent()}\n        </Base>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default Terminal;\n"]}