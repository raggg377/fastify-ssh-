{"version":3,"sources":["../../src/js/utils.js"],"names":["handleLogging","console","oldLog","Error","slice","map","Object","defineProperty","value","writable","isServer","window","document","getOs","os","family","indexOf"],"mappings":"8dAYgBA,a,CAAT,aAA4C,CAEjDC,WAAkB,UAAa,qEAC7B,GAAI,OACF,YAAQC,MAAR,+BACD,CAAC,QAAU,CACV,KAAM,IAAIC,MAAJ,CAAU,sDAAV,CACP,CACD,GAAM,GAAM,aAAUC,KAAV,CAAgB,CAAhB,CAAmB,EAAnB,EAAuBC,GAAvB,CAA2B,aAAY,CACjD,+CACE,IAAK,QAAL,CACE,MAAO,oCAAiB,MAAjB,CAA4B,eAA5B,EAAP,CACF,IAAK,UAAL,CACE,WACF,QACE,SANJ,CAQD,CATW,CAAZ,CAUA,IACD,CAnBgD,CAoBjDC,OAAOC,cAAP,CAAsBN,UAAtB,CAAuC,MAAvC,CAA+C,CAAEO,OAAF,CAAiBC,WAAjB,CAA/C,CACD,C,GAEeC,Q,CAAT,UAAoB,CACzB,MAAO,EAAoB,WAAlB,QAAOC,OAAP,EAAiCA,OAAOC,QAA1C,CACR,C,GAKeC,K,CAAT,UAAiB,iBACdC,EADc,OAEJ,KAAd,KAAGC,MAAH,EAAuD,CAAjC,KAAGA,MAAH,CAAUC,OAAV,CAAkB,SAAlB,CAFJ,CAGb,KAHa,CAKJ,IAAd,KAAGD,MAAH,EAA0D,CAAC,CAArC,GAAeC,OAAf,CAAuB,EAAGD,MAA1B,CALJ,CAMb,OANa,CAQJ,IAAd,KAAGA,MAAH,EAA2D,CAAC,CAAtC,GAAgBC,OAAhB,CAAwB,EAAGD,MAA3B,CARJ,CASb,QATa,CAWf,SACR,C,sOAhDA,WAAwB,CACvBd,eAAoBA,WACrB,CAFA,G,CAiCD,GAAM,0DAAN,CACM,gB","file":"utils.js","sourcesContent":["/* eslint-disable no-console */\nimport React from 'react'; // eslint-disable-line\nimport ObjectInspector from 'react-object-inspector';\nimport platform from 'platform';\n\n// Capture the console.log calls (hijacking)\n(function setOldLogger() {\n  console['oldLog'] = console['log']; // eslint-disable-line dot-notation\n}());\n\n// Handle console logging\n// eslint-disable-next-line import/prefer-default-export\nexport function handleLogging(method, addToOutput) {\n  // eslint-disable-next-line no-console\n  console[method] = (...args) => {\n    try {\n      console.oldLog(`[${method}]`, ...args);\n    } catch (e) {\n      throw new Error('Terminal was loaded more than once check script tags');\n    }\n    const res = [...args].slice(0, 15).map((arg, i) => {\n      switch (typeof arg) {\n        case 'object':\n          return <ObjectInspector data={arg} key={`object-${i}`} />;\n        case 'function':\n          return `${arg}`;\n        default:\n          return arg;\n      }\n    });\n    addToOutput(res);\n  };\n  Object.defineProperty(console[method], 'name', { value: method, writable: false }); // eslint-disable-line no-console\n}\n\nexport function isServer() {\n  return !(typeof window !== 'undefined' && window.document);\n}\n\nconst linuxPlatforms = ['Ubuntu', 'Debian', 'Fedora', 'Red Hat', 'SuSE', 'Android'];\nconst darwinPlatforms = ['OS X', 'iOS'];\n\nexport function getOs() {\n  const { os } = platform;\n  if (os.family !== null && os.family.indexOf('Windows') === 0) {\n    return 'win';\n  }\n  if (os.family !== null && linuxPlatforms.indexOf(os.family) > -1) {\n    return 'linux';\n  }\n  if (os.family !== null && darwinPlatforms.indexOf(os.family) > -1) {\n    return 'darwin';\n  }\n  return 'unknown';\n}\n"]}