(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'terminal-in-react/lib/js/components/Plugin', 'core-decorators'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('terminal-in-react/lib/js/components/Plugin'), require('core-decorators'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.Plugin, global.coreDecorators);
    global.index = mod.exports;
  }
})(this, function (exports, _Plugin, _coreDecorators) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _Plugin2 = _interopRequireDefault(_Plugin);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var _class, _class2, _temp;

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  // import memoize from 'memoizerific';

  // Scope class
  //   aScope.eval(str) -- eval a string within the scope
  //   aScope.newNames(name...) - adds vars to the scope
  function Scope(print) {
    // eslint-disable-line no-unused-vars
    "use strict"; // eslint-disable-line

    this.names = [];
    this.evaled = [];
    this.eval = function ev(s) {
      var toEval = ['console.log = function () {};'].concat(_toConsumableArray(this.evaled), ['(function(){', 'if (true) { console.log = print; }', 'print((() => eval("' + s + '"))())', '})()']).join(';\n');
      this.evaled = [].concat(_toConsumableArray(this.evaled), [s]);
      return eval(toEval); // eslint-disable-line
    };
    this.removeLast = function rl() {
      this.evaled.pop();
    };
  }

  Scope.prototype.newNames = function newNamesFunc() {
    "use strict"; // eslint-disable-line

    var _this = this;

    var names = [].slice.call(arguments); // eslint-disable-line
    var newNames = names.filter(function (x) {
      return !_this.names.includes(x);
    });

    if (newNames.length) {
      var totalNames = newNames.concat(this.names);
      var code = '(function() {\n';

      var len = newNames.length;
      for (var i = 0; i < len; i += 1) {
        code += 'var ' + newNames[i] + ' = null;\n';
      }
      code += 'return function(str) {return eval(str)};\n})()';
      this.eval = this.eval(code);
      this.names = totalNames;
    }
  };

  var NodeEval = (0, _coreDecorators.autobind)(_class = (_temp = _class2 = function (_PluginBase) {
    _inherits(NodeEval, _PluginBase);

    function NodeEval(api) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { filesystem: 'Pass `filesystem` into config' };

      _classCallCheck(this, NodeEval);

      var _this2 = _possibleConstructorReturn(this, (NodeEval.__proto__ || Object.getPrototypeOf(NodeEval)).call(this, api, config));

      _this2.commands = {
        node: _this2.runEvalCommand()
      };
      _this2.descriptions = {
        node: false
      };

      _this2.getPublicMethods = function () {
        return {
          node: function node(content) {
            "use strict"; // eslint-disable-line

            var scope = new Scope(function () {});
            _this2.runEval(scope, content);
          }
        };
      };

      _this2.handleLog = function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this2.api.printLine(args);
      };

      return _this2;
    }

    _createClass(NodeEval, [{
      key: 'runEval',
      value: function runEval(scope, content) {
        var _this3 = this;

        // eslint-disable-line class-methods-use-this
        function run() {
          "use strict"; // eslint-disable-line

          try {
            return Promise.resolve(scope.eval(content)); // eslint-disable-line
          } catch (e) {
            scope.removeLast();
            return Promise.reject(e);
          }
        }
        return run().catch(function (err) {
          _this3.api.printLine('Error: ' + err.message);
        });
      }
    }, {
      key: 'stopControl',
      value: function stopControl() {
        if (this.stopFirst === true) {
          this.api.releaseControl();
        } else {
          this.stopFirst = true;
          this.api.printLine('(To exit, press ^C again or type .exit)');
        }
      }
    }, {
      key: 'takeControl',
      value: function takeControl() {
        "use strict"; // eslint-disable-line

        var _this4 = this;

        var scope = new Scope(this.handleLog);
        this.api.takeControl({
          shortcuts: {
            'win, linux, darwin': {
              'ctrl + c': this.stopControl
            }
          },
          runCommand: function runCommand(inputText) {
            if (_this4.stopFirst === true && inputText === '.exit') {
              _this4.api.releaseControl();
            } else {
              _this4.stopFirst = false;
              _this4.runEval.bind(_this4)(scope, inputText).then(function (res) {
                _this4.api.printLine(typeof res !== 'function' ? res : res());
              });
            }
          }
        }, '>', '');
      }
    }, {
      key: 'runEvalCommand',
      value: function runEvalCommand() {
        var _this5 = this;

        return {
          needsInstance: true,
          method: function method(args) {
            _this5.parsePath = _this5.api.getPluginMethod(_this5.config.filesystem, 'parsePath');
            _this5.readFile = _this5.api.getPluginMethod(_this5.config.filesystem, 'readFile');
            if (args._.length > 0) {
              var path = _this5.parsePath(args._[0]);
              var file = _this5.readFile(path);
              if (file !== null && typeof file === 'string') {
                "use strict"; // eslint-disable-line
                var scope = new Scope(function () {});
                _this5.runEval.bind(_this5)(scope, file);
              }
            } else if (_this5.api.checkVersion('>=', '4.3.0')) {
              _this5.takeControl();
            } else {
              _this5.api.printLine('Node repl only works in Terminal versions above 4.2.X');
            }
          }
        };
      }
    }]);

    return NodeEval;
  }(_Plugin2.default), _class2.displayName = 'NodeEval', _class2.version = '1.0.0', _temp)) || _class;

  exports.default = NodeEval;
});